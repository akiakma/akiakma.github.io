{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/blogReact(1)","result":{"data":{"markdownRemark":{"id":"92a02d5c-6803-5be9-b33f-1c0d306d0f42","html":"<hr>\n<h1 id=\"react-공부전-알면-좋은것들\" style=\"position:relative;\"><a href=\"#react-%EA%B3%B5%EB%B6%80%EC%A0%84-%EC%95%8C%EB%A9%B4-%EC%A2%8B%EC%9D%80%EA%B2%83%EB%93%A4\" aria-label=\"react 공부전 알면 좋은것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 공부전 알면 좋은것들.</h1>\n<ol>\n<li><strong>React의 특징</strong></li>\n<li><strong>React의 장점</strong></li>\n<li><strong>React의 제한</strong></li>\n<li><strong>Global Pacakge란?</strong></li>\n<li><strong>Virtual Dom이란?</strong></li>\n<li><strong>Component란?</strong></li>\n<li><strong>JSX</strong></li>\n<li><strong>Props</strong></li>\n<li><strong>State</strong></li>\n</ol>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>특징</strong></h3>\n<ol>\n<li><strong>Virtual DOM</strong>을 사용합니다.</li>\n<li><strong>JSX</strong>: JSX는 JavaScript의 확장 문법입니다. DOM 엘리먼트들을 만들 때 JavaScript 형식으로 작성해야 하는것을, XML과 비슷한 형태로 작성할 수 있게 해줍니다. </li>\n<li><strong>Components</strong> React는 모두 Component 에 대한 것 입니다. React 개발을 할 때는 모든 것을 Component로서 생각해야 합니다.</li>\n</ol>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>장점</strong></h3>\n<ol>\n<li>Virtual DOM 을 사용한 어플리케이션의 성능 향상</li>\n<li>클라이언트에서도 렌더링 될 수 있고, 서버측에서도 렌더링 될 수 있음(이를 통해 브라우저측의 초기 렌더링 딜레이를 줄이고, SEO 호환도 가능해집니다.)</li>\n<li>Component의 가독성이 매우 높고 간단하여 쉬운 유지보수가 가능해집니다.</li>\n<li>프레임워크가 아닌 라이브러리로서 다른 프레임워크들과 사용이 가능합니다. React 에선. UI만 신경쓰고, 빠져있는 부분은 본인이 좋아하는 라이브러리를 사용하여 stack을 본인의 입맛대로 설정 할 수 있음</li>\n</ol>\n<h3 id=\"제한\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C\" aria-label=\"제한 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>제한</strong></h3>\n<ol>\n<li>어플리케이션 View 레이어만 다루므로 이 외의 부분은 다른 기술을 사용해야 합니다 (예를들어 Ajax, Router)</li>\n<li>IE8 이하 버전을 지원하지 않습니다.</li>\n</ol>\n<h3 id=\"global-package\" style=\"position:relative;\"><a href=\"#global-package\" aria-label=\"global package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Global Package</strong></h3>\n<ol>\n<li>babel: ECMAScript6 Syntax를 사용 할 수 있게 해줍니다.</li>\n<li>webpack: 모듈 번들러로서, Browserify 처럼 브라우저 위에서 import(require)을 할 수 있게 해주고 자바스크립트 파일들을 하나로 합쳐 줍니다.</li>\n<li>webpack-dev-server: webpack에서 지원하는 간단한 개발서버로서 별도의 서버를 구축하지 않고도 웹서버를 열수 있으며 hot-loader를 통하여 코드가 수정될때마다 자동으로 리로드 되게 할 수 있습니다.</li>\n</ol>\n<h3 id=\"virtual-dom\" style=\"position:relative;\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual DOM</h3>\n<p>Virtual Dom은 단순한 DOM 조작 도구가 아니라 컴포넌트 단위로 움직이는 Declarative한 개발을 위해 도입된 것이다.</p>\n<blockquote>\n<p><em>Virtual Dom이 자신의 역할을 수행하는 부분(순서)</em></p>\n<ol>\n<li><em>React 컴포넌트는 render를 다시 호출하여 새로운 결과값을 return한다. 하지만 이 return 값은 바로 DOM에 반영되지 않는다. (바로 브라우저에 렌더링되지 않는다)</em></li>\n<li>\n<p><em>React는 새로운 return 값을 가지고 새로운 Virtual DOM을 만든다.</em></p>\n<ul>\n<li><em>React안에 있는 div들은 진짜 html이 아니라 Babel에 의해 컴파일되는 JSX</em></li>\n<li><em>render함수가 return하는 것은 새로운 Virtual DOM을 만들기 위한 재료</em></li>\n</ul>\n</li>\n<li><em>현재 브라우저에 보여지고 있는 진짜 DOM과 비교하여 어떤 부분이 달라졌는지 찾아낸다.</em></li>\n<li><em>바뀐 부분만 진짜 DOM에 적용한다.</em></li>\n<li><em>브라우저는 이 DOM을 해석하여 유저에게 새로운 화면을 보여준다.</em></li>\n</ol>\n</blockquote>\n<p>왜 이렇게 번거로운 비교작업을 거치는 것일까?</p>\n<p>브라우저에게 DOM을 해석하고 렌더링 하는 것은 굉장히 비싼 작업입니다. Virtual DOM은 그 작업을 미리 최적화 시켜줄 뿐만아니라, 컴포넌트 단위로 묶어서 관리할 수 있게 해줍니다.</p>\n<h3 id=\"component-분석\" style=\"position:relative;\"><a href=\"#component-%EB%B6%84%EC%84%9D\" aria-label=\"component 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Component 분석</strong></h3>\n<blockquote>\n<p>Component는 UI를 구성하는 개별적인 뷰 단위입니다.</p>\n<p>전체 앱은 각 Component들이 결합해서 만들어 집니다.</p>\n<p>각 Component들은 앱의 다른 부분, 도는 다른 앱에서 쉽개 재사용이 가능합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;;\n\nclass App extends React.Component {\n    render(){\n\n        return (\n                &lt;h1&gt;Hello Velopert&lt;/h1&gt;\n        );\n    }\n}\n\nexport default App;</code></pre></div>\n<ul>\n<li><strong>import</strong> 는 ES6 에 도입된 새로운 문법인데, var React = require(‘react’)와 같습니다. React 모듈은 component를 만들때 사용됩니다.</li>\n<li><strong>class</strong>  모든 Component 는 React.Component 를 상속합니다. ES5 환경에서는 React.createClass()라는 메소드를 사용합니다. 또한 ES5 에서 클래스를 만들때는 메소드들을 nest할 수 없고 prototype 을 사용했어야 했습니다.</li>\n<li><strong>render()</strong> 메소드에서는 컴포넌트에 렌더링 될 데이타를 정의합니다.</li>\n<li><strong>위 코드 펜스에서 LINE 5~7</strong> 이 부분이 JSX의 가장 중요한 부분입니다. 자바스크립트에서 html태그를 반환하는데, 따옴표 같은건 없습니다. React JSX는 XML-like Syntax를 native Javascript로 변환해줍니다. 따라서 ” “로 감싸지 않는 점 주의해야 합니다. ()를 사용하지 않아도 오류는 발생하지 않지만 가독성을 위하여 사용하는 것이 좋습니다.</li>\n</ul>\n<h3 id=\"react-에서-jsx문법-사용의-장점\" style=\"position:relative;\"><a href=\"#react-%EC%97%90%EC%84%9C-jsx%EB%AC%B8%EB%B2%95-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"react 에서 jsx문법 사용의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React 에서 JSX문법 사용의 장점</strong></h3>\n<p>JSX는 React를 위해 태어난 새로운 자바스크립트 문법입니다.</p>\n<ol>\n<li>JSX는 컴파일링 되면서 최적화 되므로, 빠르다.</li>\n<li>Tyep-safe 그리고 컴파일링 과정에서 에러를 감지할 수 있다.(Type-safe란 예측 불가능한 결과를 나타내지 않는다는것을 의미합니다.)</li>\n<li>JSX를 사용하여 더 쉽고 빠르게 템플릿을 작성 할 수 있다.</li>\n</ol>\n<h3 id=\"jsx-사용시-주의사항\" style=\"position:relative;\"><a href=\"#jsx-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"jsx 사용시 주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>JSX 사용시 주의사항</strong></h3>\n<ol>\n<li>꼭 닫혀야 하는 태그</li>\n<li>감싸져 있는 엘리먼트</li>\n<li>JSX 안에 자바스크립트 값 사용하기</li>\n<li>조건부 렌더링</li>\n<li>style과 className</li>\n<li>주석</li>\n</ol>\n<p>컴포넌트에 여러 Element를 렌더링 해야 할 때, 그 element들을 필수적으로 container element  안에 포함시켜줘야 됩니다.               (JavaScript Expression)</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">    render(){\n        let text = &quot;Dev-Server&quot;\n        return  (\n            &lt;div&gt;\n                &lt;h1&gt; Hello Velopert &lt;/h1&gt;\n                &lt;h2&gt; Welcome to {text}&lt;/h2&gt;\n            &lt;/div&gt;\n        );\n    }</code></pre></div>\n<p>ES6 에 도입된 let키워드는 var와 비슷하지만, var변수의 scope는 기본적으로 함수 단위인데 let은 블럭범위내에서 변수를 선업합니다. 따라서 Javascript의 Scope관련 문제를 해결 할 수 있습니다. ES6에선 평상시 let을 쓰고 var는 필요한 상황에서만 사용하는게 좋습니다. {text}를 사용하여 text Javacript 변수를 렌더링 합니다.</p>\n<p><strong>임의 method 생성 및 사용하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">//method 생성 및 사용법\n sayHey(){\n    alert(&quot;hey&quot;);\n  }\n\n  render(){\n    let text = &quot;Dev-Server&quot;\n    return  (\n      &lt;div&gt;\n        &lt;h1&gt; Hello Velopert &lt;/h1&gt;\n        &lt;h2&gt; Welcome to {text}&lt;/h2&gt;\n        &lt;button onClick={this.sayHey}&gt;Click Me&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }</code></pre></div>\n<p>{this.sayHey}를 통해 버튼이 클릭되면 해당 메소드가 실행되게 할 수 있습니다. ()가 뒤에 안붙어있다는점을 주의해야합니다<u>. 만약에 ()가 붙으면 페이지가 로드 될때도 실행되고, 클릭할때도 실행됩니다.</u></p>\n<p><strong>IF-Else 문 사용 불가</strong></p>\n<p>JSX 안에서 사용되는 JavaSciprt 표현에는 IF-Else 문이 사용 불가능합니다. 이에 대한 대안은 ternary표현을 사용하는 것입니다.</p>\n<p><strong>Inline Style</strong></p>\n<p>React의 Inline Style 에서는, string 형식이 사용되지 않고 key가 camelCase 인 Object 가 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\"> //inline Style 예제\n render(){\n        let text = &quot;Dev-Server&quot;;\n\n        let pStyle = {\n            color: &#39;aqua&#39;,\n            backgroundColor: &#39;black&#39;\n        };\n\n        return  (\n            &lt;div&gt;\n                &lt;h1&gt; Hello Velopert &lt;/h1&gt;\n                &lt;h2&gt; Welcome to {text}&lt;/h2&gt;\n                &lt;button onClick= {this.sayHey}&gt;Click Me&lt;/button&gt;\n                &lt;p style = {pStyle}&gt;{1 == 1 ? &#39;True&#39; : &#39;False&#39;}&lt;/p&gt;\n            &lt;/div&gt;\n        );\n    }\n//pStyle이 p element에 적용되었습니다.</code></pre></div>\n<p><strong>Naming Convetion</strong></p>\n<p>모든 React Compoonent 는 첫 문자가 대문자인 CamelCase로 작성됩니다.</p>\n<h3 id=\"props\" style=\"position:relative;\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props</h3>\n<p>props는 컴포넌트에서 사용 할 데이터 중 변동되지 않는 데이터를 다룰 때 사용됩니다. parent 컴포넌트에서 child 컴포넌트로 데이터를 전할 때, props가 사용됩니다.</p>\n<h3 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h3>\n<p>컴포넌트에서 유동적인 데이터를 다룰 때,  state를 사용합니다. React.js 어플리케이션을 만들 땐, state를 사용하는 컴포넌트의 갯수를 최소화 하는 것을 노력해야 합니다. 예를들어, 10개의 컴포넌트에서 유동적인 데이터를 사용 하게 될땐, 각 데이터에 state를 사용할 게 아니라, props를 사용하고 10개의 컴포넌트를 포함시키는 container 컴포넌트를 사용하는 것이 효율적입니다.</p>\n<p><strong>Props와 State는 중요하므로 다음 블로그에서 자세하게 다뤄보겠습니다.</strong></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mi>s</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>c</mi><mi>o</mi><mi>m</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">https://velopert.com/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mord\">/</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>t</mi><mi>t</mi><mi>p</mi><mi>s</mi><mo>:</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>e</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>m</mi><mi>u</mi><mi>n</mi><mo>−</mo><mi>h</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi mathvariant=\"normal\">.</mi><mi>g</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>u</mi><mi>b</mi><mi mathvariant=\"normal\">.</mi><mi>i</mi><mi>o</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">https://seongmun-hong.github.io/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">.</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">b</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">o</span><span class=\"mord\">/</span></span></span></span></p>","fields":{"slug":"/posts/blogReact(1)","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-02-16T23:40:32.169Z","description":"벨로퍼트님과 성문님 블로그글을 참조하여 정리하였습니다. 리액트를 시작하기전에 간단하게 훑고간다면 리액트를 배우는데 조금더 수월해질 것 같습니다.","tags":["react"],"title":"React(1)","socialImage":null}}},"pageContext":{"slug":"/posts/blogReact(1)"}}}