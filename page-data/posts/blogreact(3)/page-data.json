{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/blogreact(3)","result":{"data":{"markdownRemark":{"id":"deb4dbc4-7d2c-5c92-94c7-04dcf5b0d8f7","html":"<h1 id=\"삼항연산자\" style=\"position:relative;\"><a href=\"#%EC%82%BC%ED%95%AD%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"삼항연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삼항연산자</h1>\n<p>리액트에서는 {}로 감싸주면 JSX에 JS를 사용할 수 있습니다.  그러나.. if문은 JSX내에 넣을 수 없습니다. 그렇다면 JSX내에서 if문을 사용하고 싶을때는 어떻게 해야 할까요?</p>\n<p>바로 <strong>3항 연산자</strong>가 이때 쓰입니다. <u>3항연산자는 a ? b : c 와 같은 형식으로 사용</u>하고 여기서 a부분이 조건이고 이 부분이 true이면 b를 반환하고  false이면 c를 반환하는 연산자입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { Component } from &#39;react&#39;;\n \nclass App extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        {\n          10 + 30 === 40 \n            ? (&lt;div&gt;true&lt;/div&gt;)\n            : (&lt;div&gt;false&lt;/div&gt;)\n        }\n      &lt;/div&gt;\n    );\n  }\n}\n \nexport default App;</code></pre></div>\n<p>복잡한 조건식을 사용할떄에는 웬만하면 JSX 밖에서 로직을 구현하는것이 좋습니다. 하지만 JSX에서 사용한다면 즉시 실행 함수(IIFE)를 이용합니다.</p>\n<p>또 다른 방법으로는 <strong>논리연산자&#x26;&#x26;</strong> 을 사용하는 것입니다. </p>\n<p>조건 &#x26;&#x26; expression 이런식으로 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">console.log(true &amp;&amp; 1 &gt; 0 &amp;&amp; &#39;success&#39;); //success \nconsole.log(true &amp;&amp; 1 &lt; 0 &amp;&amp; &#39;success&#39;); //false \nconsole.log(1 &gt; 0 || &#39;success&#39;); //true \nconsole.log(1 &lt; 0 || &#39;success&#39;); //success </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">function isAdult(age) {\n   return age &amp;&amp; age &gt; 17 ;\n}\n\nisAdult(16) // false\nisAdult(18) // true\nisAdult()   // false</code></pre></div>","fields":{"slug":"/posts/blogreact(3)","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-03-06T22:37:32.169Z","description":"간단하게 삼항연산자와 논리연산자에 관하여 작성해보았습니다.","tags":["react"],"title":"삼항연산자와 논리연산자(기초)","socialImage":null}}},"pageContext":{"slug":"/posts/blogreact(3)"}}}